// ===================================
// EXERCICE 1 : SYST√àME DE GESTION DE BIBLIOTH√àQUE
// ===================================

// Objectif : Cr√©er un syst√®me complet de gestion de biblioth√®que
// Utilise : variables, op√©rateurs, conditions, boucles, fonctions

// Structure de donn√©es principales
const bibliotheque = {
    livres: [],
    utilisateurs: [],
    emprunts: [],
    prochainIdLivre: 1,
    prochainIdUtilisateur: 1,
    prochainIdEmprunt: 1
};

// ===================================
// 1. GESTION DES LIVRES
// ===================================

/**
 * Ajoute un livre √† la biblioth√®que avec validation compl√®te
 * @param {string} titre - Titre du livre
 * @param {string} auteur - Auteur du livre
 * @param {string} isbn - ISBN du livre (format: XXX-X-XX-XXXXXX-X)
 * @param {number} annee - Ann√©e de publication
 * @param {string} genre - Genre du livre
 * @returns {object} R√©sultat de l'op√©ration
 */
function ajouterLivre(titre, auteur, isbn, annee, genre) {
    // TODO: Impl√©menter la validation compl√®te
    // - V√©rifier que tous les param√®tres sont fournis
    // - Valider le format ISBN
    // - V√©rifier que l'ann√©e est valide (entre 1000 et ann√©e actuelle)
    // - V√©rifier que l'ISBN n'existe pas d√©j√†
    // - Ajouter le livre avec un ID unique
    
    console.log("√Ä impl√©menter : ajouterLivre");
    return { succes: false, message: "Fonction √† impl√©menter" };
}

/**
 * Recherche des livres selon diff√©rents crit√®res
 * @param {object} criteres - Crit√®res de recherche
 * @returns {array} Liste des livres trouv√©s
 */
function rechercherLivres(criteres) {
    // TODO: Impl√©menter la recherche avanc√©e
    // - Recherche par titre (partielle, insensible √† la casse)
    // - Recherche par auteur
    // - Recherche par genre
    // - Recherche par ann√©e ou plage d'ann√©es
    // - Combiner plusieurs crit√®res
    // - Trier les r√©sultats par pertinence
    
    console.log("√Ä impl√©menter : rechercherLivres");
    return [];
}

// ===================================
// 2. GESTION DES UTILISATEURS
// ===================================

/**
 * Ajoute un utilisateur √† la biblioth√®que
 * @param {string} nom - Nom de l'utilisateur
 * @param {string} email - Email de l'utilisateur
 * @param {string} telephone - Num√©ro de t√©l√©phone
 * @returns {object} R√©sultat de l'op√©ration
 */
function ajouterUtilisateur(nom, email, telephone) {
    // TODO: Impl√©menter l'ajout d'utilisateur
    // - Valider l'email (format correct)
    // - Valider le t√©l√©phone (10 chiffres)
    // - V√©rifier que l'email n'existe pas d√©j√†
    // - Cr√©er l'utilisateur avec ID unique
    
    console.log("√Ä impl√©menter : ajouterUtilisateur");
    return { succes: false, message: "Fonction √† impl√©menter" };
}

// ===================================
// 3. GESTION DES EMPRUNTS
// ===================================

/**
 * Permet √† un utilisateur d'emprunter un livre
 * @param {number} utilisateurId - ID de l'utilisateur
 * @param {number} livreId - ID du livre
 * @returns {object} R√©sultat de l'op√©ration
 */
function emprunterLivre(utilisateurId, livreId) {
    // TODO: Impl√©menter l'emprunt avec r√®gles m√©tier
    // - V√©rifier que l'utilisateur existe
    // - V√©rifier que le livre existe et est disponible
    // - V√©rifier que l'utilisateur n'a pas d√©j√† 3 emprunts
    // - Calculer la date de retour (14 jours)
    // - Enregistrer l'emprunt
    // - Marquer le livre comme indisponible
    
    console.log("√Ä impl√©menter : emprunterLivre");
    return { succes: false, message: "Fonction √† impl√©menter" };
}

/**
 * Permet de retourner un livre emprunt√©
 * @param {number} empruntId - ID de l'emprunt
 * @returns {object} R√©sultat de l'op√©ration
 */
function retournerLivre(empruntId) {
    // TODO: Impl√©menter le retour de livre
    // - V√©rifier que l'emprunt existe et est actif
    // - Calculer les √©ventuels frais de retard
    // - Marquer l'emprunt comme termin√©
    // - Rendre le livre disponible
    
    console.log("√Ä impl√©menter : retournerLivre");
    return { succes: false, message: "Fonction √† impl√©menter" };
}

// ===================================
// 4. SYST√àME DE RECOMMANDATIONS
// ===================================

/**
 * Recommande des livres √† un utilisateur
 * @param {number} utilisateurId - ID de l'utilisateur
 * @param {number} nombreRecommandations - Nombre de recommandations
 * @returns {array} Liste des livres recommand√©s
 */
function recommanderLivres(utilisateurId, nombreRecommandations = 5) {
    // TODO: Impl√©menter le syst√®me de recommandations
    // - Analyser l'historique d'emprunts de l'utilisateur
    // - Identifier les genres pr√©f√©r√©s
    // - Trouver des livres similaires non emprunt√©s
    // - √âviter les livres d√©j√† emprunt√©s par l'utilisateur
    // - Prioriser les livres populaires
    
    console.log("√Ä impl√©menter : recommanderLivres");
    return [];
}

// ===================================
// 5. STATISTIQUES ET RAPPORTS
// ===================================

/**
 * G√©n√®re des statistiques compl√®tes de la biblioth√®que
 * @returns {object} Objet contenant toutes les statistiques
 */
function genererStatistiques() {
    // TODO: Impl√©menter les statistiques avanc√©es
    // - Livre le plus emprunt√©
    // - Genre le plus populaire
    // - Utilisateur le plus actif
    // - Taux d'occupation de la biblioth√®que
    // - Moyenne d'emprunts par utilisateur
    // - Livres jamais emprunt√©s
    // - Retards moyens
    
    console.log("√Ä impl√©menter : genererStatistiques");
    return {};
}

/**
 * G√©n√®re un rapport des emprunts en retard
 * @returns {array} Liste des emprunts en retard
 */
function rapportRetards() {
    // TODO: Impl√©menter le rapport des retards
    // - Identifier tous les emprunts en retard
    // - Calculer le nombre de jours de retard
    // - Calculer les frais de retard
    // - Trier par nombre de jours de retard
    
    console.log("√Ä impl√©menter : rapportRetards");
    return [];
}

// ===================================
// 6. FONCTIONS UTILITAIRES
// ===================================

/**
 * Valide le format d'un ISBN
 * @param {string} isbn - ISBN √† valider
 * @returns {boolean} True si valide
 */
function validerISBN(isbn) {
    // TODO: Impl√©menter la validation ISBN
    // Format attendu: XXX-X-XX-XXXXXX-X
    console.log("√Ä impl√©menter : validerISBN");
    return false;
}

/**
 * Valide le format d'un email
 * @param {string} email - Email √† valider
 * @returns {boolean} True si valide
 */
function validerEmail(email) {
    // TODO: Impl√©menter la validation email
    console.log("√Ä impl√©menter : validerEmail");
    return false;
}

/**
 * Calcule la date de retour (14 jours apr√®s la date d'emprunt)
 * @param {Date} dateEmprunt - Date d'emprunt
 * @returns {Date} Date de retour pr√©vue
 */
function calculerDateRetour(dateEmprunt) {
    // TODO: Impl√©menter le calcul de date de retour
    console.log("√Ä impl√©menter : calculerDateRetour");
    return new Date();
}

// ===================================
// 7. DONN√âES DE TEST
// ===================================

/**
 * Initialise la biblioth√®que avec des donn√©es de test
 */
function initialiserDonneesTest() {
    // TODO: Ajouter des livres, utilisateurs et emprunts de test
    console.log("√Ä impl√©menter : initialiserDonneesTest");
}

// ===================================
// 8. FONCTIONNALIT√âS BONUS
// ===================================

/**
 * Syst√®me de r√©servation de livres
 * @param {number} utilisateurId - ID de l'utilisateur
 * @param {number} livreId - ID du livre
 * @returns {object} R√©sultat de la r√©servation
 */
function reserverLivre(utilisateurId, livreId) {
    // BONUS: Impl√©menter le syst√®me de r√©servation
    console.log("BONUS √† impl√©menter : reserverLivre");
    return { succes: false, message: "Fonction bonus √† impl√©menter" };
}

/**
 * Syst√®me de notation des livres
 * @param {number} utilisateurId - ID de l'utilisateur
 * @param {number} livreId - ID du livre
 * @param {number} note - Note de 1 √† 5
 * @param {string} commentaire - Commentaire optionnel
 * @returns {object} R√©sultat de la notation
 */
function noterLivre(utilisateurId, livreId, note, commentaire = "") {
    // BONUS: Impl√©menter le syst√®me de notation
    console.log("BONUS √† impl√©menter : noterLivre");
    return { succes: false, message: "Fonction bonus √† impl√©menter" };
}

// ===================================
// INSTRUCTIONS POUR L'EXERCICE
// ===================================

/*
INSTRUCTIONS :

1. Impl√©mentez toutes les fonctions marqu√©es "TODO"
2. Utilisez tous les concepts JavaScript vus :
   - Variables (let, const) et types de donn√©es
   - Op√©rateurs (arithm√©tiques, comparaison, logiques)
   - Conditions (if/else, switch, op√©rateur ternaire)
   - Boucles (for, while, for...of, forEach)
   - Fonctions (d√©clarations, expressions, arrow functions)

3. Respectez les bonnes pratiques :
   - Validation des param√®tres d'entr√©e
   - Gestion des cas d'erreur
   - Code lisible et bien comment√©
   - Fonctions pures quand possible

4. Testez votre code :
   - Cr√©ez des cas de test pour chaque fonction
   - V√©rifiez les cas limites
   - Testez avec des donn√©es invalides

5. Fonctionnalit√©s bonus (optionnelles) :
   - Syst√®me de r√©servation
   - Notation des livres
   - Interface en ligne de commande
   - Sauvegarde des donn√©es

CRIT√àRES D'√âVALUATION :
- Fonctionnalit√© (40%) : Toutes les fonctions marchent correctement
- Qualit√© du code (30%) : Code propre, lisible, bien structur√©
- Gestion d'erreurs (20%) : Validation et gestion des cas d'erreur
- Innovation (10%) : Fonctionnalit√©s bonus et cr√©ativit√©

BONNE CHANCE ! üöÄ
*/